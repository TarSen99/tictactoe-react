{"version":3,"sources":["components/Header.js","components/Cell.js","components/Field.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputValue","handleChangeInput","bind","assertThisInitialized","handleSubmit","event","value","target","parseInt","isNaN","setState","preventDefault","signSourceWay","concat","currentSign","react_default","a","createElement","className","placeholder","onChange","onClick","gameOver","wonSign","src","alt","React","Component","Cell","sign","style","width","size","height","margin","spacing","handleCellClick","id","Field","_getCellSize","cellSizes","currFieldSize","key","hasOwnProperty","cellSize","cellSpacing","getCellSize","fieldWidth","cells","map","cell","App","fieldSize","minFieldSize","maxFieldSize","getCells","getCellSizes","pointsToWin","getPointsToWin","freeCells","InitialFieldSize","Array","fill","index","x","y","Math","floor","3","between","5","7","10","12","startX","startY","moveOnX","moveOnY","_this2","currentPoints","arguments","length","undefined","_loop2","i","currentPos","currCell","find","v","_loop","_ret","checkLine","_ref","moves","_i","move","clickedCell","result","processMatches","endGame","oldState","max","min","Header_Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ae58f42.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Header extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      inputValue: '',\r\n    };\r\n\r\n    this.handleChangeInput = this.handleChangeInput.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChangeInput(event) {\r\n    let { value } = event.target;\r\n\r\n    value = parseInt(value);\r\n\r\n    if(isNaN(value)) {\r\n      value = '';\r\n    }\r\n\r\n    this.setState({\r\n      inputValue: value,\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    this.props.handleSubmit(+this.state.inputValue);\r\n  }\r\n\r\n  render() {\r\n    const signSourceWay = `\r\n    ${this.props.currentSign === 'X' ? '../img/x-3.png' :\r\n      this.props.currentSign === 'O' ? '../img/o-3.png' :\r\n        ''\r\n      }`;\r\n\r\n    return (\r\n      <div className=\"header\">\r\n        <input\r\n          value={this.state.inputValue}\r\n          placeholder=\"size\"\r\n          onChange={this.handleChangeInput}\r\n          className=\"header__input\"\r\n        />\r\n\r\n        <button\r\n          onClick={this.handleSubmit}\r\n          className=\"header__button\"\r\n        >\r\n          Generate / Restart game\r\n        </button>\r\n        <div className=\"header__text-block\">\r\n          {this.props.gameOver ?\r\n            this.props.wonSign ?\r\n              <div className=\"header__moves-text\">\r\n                Player\r\n                <img src={signSourceWay} alt=\"\"\r\n                />\r\n                Won!\r\n              </div>\r\n              : <span>It's a draw!</span>\r\n              : <div className=\"header__moves-text\">\r\n                  <span>Player</span>\r\n                  <img src={signSourceWay} alt=\"\" />\r\n                  <span>is moving</span>\r\n                </div>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nexport default function Cell(props) {\r\n  const signSourceWay = `${props.sign === 'X' ? '../img/x-3.png'\r\n    : props.sign === 'O' ? '../img/o-3.png' : ''\r\n    }`;\r\n\r\n  return (\r\n    <div\r\n      className=\"cell\"\r\n      style={{\r\n        width: props.size,\r\n        height: props.size,\r\n        margin: props.spacing / 2,\r\n      }}\r\n      onClick={() => props.handleCellClick(props.id)}\r\n    >\r\n      <img\r\n        className=\"cell__img\"\r\n        src={signSourceWay}\r\n        alt=\"\"\r\n      />\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nexport default function Field(props) {\r\n  const getCellSize = () => {\r\n    const cellSizes = props.cellSizes;\r\n    const currFieldSize = props.size;\r\n\r\n    for(let key in cellSizes) {\r\n      if(!cellSizes.hasOwnProperty(key)) {\r\n        return;\r\n      }\r\n\r\n      if(+key >= currFieldSize) {\r\n        return {\r\n          cellSize: cellSizes[key]['size'],\r\n          cellSpacing: cellSizes[key]['between'],\r\n        };\r\n      }\r\n    }\r\n  };\r\n\r\n  const {cellSize, cellSpacing} = getCellSize();\r\n  const fieldWidth = props.size * (cellSize + cellSpacing);\r\n\r\n  return (\r\n    <div\r\n      className=\"field\"\r\n      style={{\r\n        width: fieldWidth,\r\n      }}\r\n    >\r\n      {props.cells.map((cell) => {\r\n        return (\r\n          <Cell\r\n            size={cellSize}\r\n            spacing={cellSpacing}\r\n            sign={cell.sign}\r\n            key={cell.id}\r\n            id={cell.id}\r\n            handleCellClick={props.handleCellClick}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}","import React, {Component} from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport Field from './components/Field';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const InitialFieldSize = 3;\n    const minFieldSize = 3;\n    const maxFieldSize = 12;\n\n    this.state = {\n      fieldSize: InitialFieldSize,\n      minFieldSize: minFieldSize,\n      maxFieldSize: maxFieldSize,\n      cells: this.getCells(InitialFieldSize),\n      cellSizes:  this.getCellSizes(),\n      currentSign: 'X',\n      wonSign: null,\n      pointsToWin: this.getPointsToWin(InitialFieldSize),\n      gameOver: false,\n      freeCells: InitialFieldSize * InitialFieldSize,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCellClick = this.handleCellClick.bind(this);\n  }\n\n  getCells(size) {\n    return Array(size * size).fill(null)\n      .map((cell, index) => {\n        return {\n          id: index,\n          sign: '',\n          x: index % size,\n          y: Math.floor(index / size),\n        }\n      });\n  }\n\n  getCellSizes() {\n    return {\n      3: {\n        size: 100,\n        between: 10,\n      },\n\n      5: {\n        size: 80,\n        between: 8,\n      },\n\n      7: {\n        size: 70,\n        between: 6,\n      },\n\n      10: {\n        size: 60,\n        between: 4,\n      },\n\n      12: {\n        size: 45,\n        between: 4,\n      },\n    };\n  }\n\n  getPointsToWin(fieldSize) {\n    if(fieldSize === 3) {\n      return 3;\n    } else if(fieldSize === 4) {\n      return 4;\n    } else {\n      return 5;\n    }\n  }\n\n  //startX, startY - pos where user clicked\n  //key - direction of checking\n  //key = -1 --- move front, 1 -- move back\n  //currentPoints -- summ of current points on checking line\n  //if moveOnX = 1 we move on X axis\n  //if moveOnY = 1 we move on Y axis\n  //if both not equal to 0, we move on some diagonal (main/opposite)\n  checkLine(startX, startY, key, moveOnX, moveOnY, currentSign, currentPoints = 0) {\n    for(let i = 0; i < this.state.fieldSize; i++) {\n      const currentPos = {\n        x: startX - (i * moveOnX) * key,\n        y: startY - (i * moveOnY) * key,\n      };\n\n      let currCell = this.state.cells.find(cell => {\n        return cell.x === currentPos.x && cell.y === currentPos.y;\n      });\n\n      if(!currCell) {\n        break;\n      }\n\n      if(currCell.sign === currentSign) {\n        currentPoints++;\n      } else {\n        break;\n      }\n\n      if(currentPoints === this.state.pointsToWin) {\n        return true;\n      }\n    }\n\n    //if we haven't found win combination on front direction\n    //move back and try to find there\n    //currentPoints - 1 cause we start from (startX, startY) two times\n    if(key === -1) {\n      let backResult = this.checkLine(\n        startX, startY, 1, moveOnX, moveOnY, currentSign, currentPoints - 1\n      );\n\n      if(backResult) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  processMatches({ x, y }, currentSign) {\n    let key = -1;\n    let moves = [[1, 0], [0, 1], [1,1], [-1, 1]];\n\n    for(let move of moves) {\n      const result = this.checkLine(x, y, key, move[0], move[1], currentSign);\n\n      if(result) {\n        return true;\n      }\n    }\n\n   return false;\n  }\n\n  endGame(freeCells, currentSign) {\n    this.setState({\n      gameOver: true,\n      freeCells: freeCells,\n      wonSign: currentSign ? currentSign : null\n    });\n  }\n\n  handleCellClick(id) {\n    if(this.state.gameOver) {\n      return;\n    }\n\n    let clickedCell = this.state.cells.find(cell => cell.id === id);\n\n    if(clickedCell.sign !== '') {\n      return;\n    }\n\n    const currentSign = this.state.currentSign;\n    const freeCells = this.state.freeCells - 1;\n    clickedCell.sign = currentSign;\n\n    let result = this.processMatches({\n      x: clickedCell.x,\n      y: clickedCell.y,\n    }, currentSign);\n\n    if(result) {\n      this.endGame(freeCells, currentSign);\n    } else if(freeCells === 0) {\n      this.endGame(freeCells);\n    }\n\n    this.setState(oldState => {\n      if(!result) {\n        return {\n          currentSign: oldState.currentSign === 'X' ? 'O' : 'X',\n          freeCells: freeCells,\n        }\n      }\n\n      return {\n        currentSign: oldState.currentSign,\n      }\n    });\n  }\n\n  handleSubmit(value) {\n    let fieldSize = Math.max(value, this.state.minFieldSize);\n    fieldSize = Math.min(fieldSize, this.state.maxFieldSize);\n\n    this.setState({\n      fieldSize: fieldSize,\n      cells: this.getCells(fieldSize),\n      pointsToWin: this.getPointsToWin(fieldSize),\n      currentSign: 'X',\n      wonSign: null,\n      gameOver: false,\n      freeCells: fieldSize * fieldSize,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Header\n          currentSign={this.state.currentSign}\n          handleSubmit={this.handleSubmit}\n          gameOver={this.state.gameOver}\n          freeCells={this.state.freeCells}\n          wonSign={this.state.wonSign}\n        />\n\n        <Field\n          size={this.state.fieldSize}\n          cellSizes={this.state.cellSizes}\n          cells={this.state.cells}\n          handleCellClick={this.handleCellClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}